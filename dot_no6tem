#!/bin/bash
if ! grep -q -m 1 archlinux /etc/os-release; then
  printf '%s\n' "Error: Arch Linux only!"; exit 1
fi

# darkmaster's no6tem @grm34
set -e

# Settings
user="keyzer" # username
host="no6tem" # hostname
timezone="Europe/Paris" # timezone
lang="en_US.UTF-8" # language
keymap="fr" # keyboard layout
font="Lat2-Terminus16" # terminal font
boot="/dev/sda1" # boot partition (EFI)
no6tem="/dev/sda2" # no6tem partition (Linux LVM)
single_root_partition="false" # homeless partition?
root_size="50G" # root partition size
swap_size="8G" # <false> to disable swapfile
microcode="intel-ucode" # CPU microcode updates
boot_options="i915.enable_dpcd_backlight=1"
dotfiles="https://github.com/grm34/no6tem"

# Usage
printf -v usage '%s\n'\
  "Welcome in Arch Linux darkmaster's no6tem installer!

  # Download and install no6tem
  curl -L -O https://n9.cl/no6tem
  chmod +x no6tem && mv no6tem /bin/no6tem

  # Partitioning scheme
  boot: create 1GB partition and set the type to 'EFI' 
  no6tem: create (free) partition and set the type to 'Linux LVM'

  # From USB Live
  Drive Manager (LVM on LUKS):  no6tem prepare drive
  Install Arch Linux Base:      no6tem install base

  # From Arch Linux
  Install AUR Helper:           no6tem install aur_helper
  Install Firmware Modules:     no6tem install firmware_modules
  Install Intel GPU Drivers:    no6tem install intel_gpu_drivers
  Install Sound System:         no6tem install sound_system
  Install Multimedia Support:   no6tem install multimedia_support
  Install GUI Libraries:        no6tem install gui_libraries
  Install Themes & Fonts:       no6tem install themes_fonts
  Install Terminal & Shell:     no6tem install terminal_shell
  Install File Manager:         no6tem install file_manager
  Install Text Editor:          no6tem install text_editor
  Install Tiling Compositor:    no6tem install tiling_compositor
  Install Status Bar:           no6tem install status_bar
  Install Login Manager:        no6tem install login_manager
  Install User Applications:    no6tem install user_apps
  Install Dotfiles:             no6tem install dotfiles"


### Drive Manager ###
drive_manager() {
  mkfs.fat -F 32 "$boot"
  mkfs.ext4 "$no6tem"
  cryptsetup -v luksFormat "$no6tem"
  cryptsetup open "$no6tem" no6tem
  pvcreate /dev/mapper/no6tem
  vgcreate no6tem /dev/mapper/no6tem
  if [[ $single_root_partition == "false" ]]; then
    lvcreate -L "$root_size" no6tem -n root
    lvcreate -l 100%FREE no6tem -n home
    mkfs.ext4 /dev/no6tem/root
    mkfs.ext4 /dev/no6tem/home
    mount /dev/no6tem/root /mnt
    mount --mkdir /dev/no6tem/home /mnt/home
  else
    lvcreate -l 100%FREE no6tem -n root
    mkfs.ext4 /dev/no6tem/root
    mount /dev/no6tem/root /mnt
  fi    
  mount --mkdir "$boot" /mnt/boot
}


### Install Arch Linux Base ###
base() {
  local root uuid folders
  chroot() { arch-chroot /mnt /bin/bash -c "$@"; }
  timedatectl set-timezone "$timezone"

  # essential packages
  pacstrap -K /mnt base base-devel linux linux-firmware\
    $microcode lvm2 reflector networkmanager man-db

  # fstab
  genfstab -U /mnt >> /mnt/etc/fstab

  # time
  ln -sf /mnt/usr/share/zoneinfo/"$timezone" /mnt/etc/localtime
  chroot "timedatectl set-timezone $timezone"
  chroot "timedatectl set-ntp true"

  # localization
  sed -i "s|#${lang} UTF-8|${lang} UTF-8|g" /mnt/etc/locale.gen
  chroot "locale-gen"
  printf '%s' "LANG=$lang" > /mnt/etc/locale.conf
  printf '%s\n%s'\
    "KEYMAP=$keymap"\
    "FONT=$font"\
    > /mnt/etc/vconsole.conf

  # network
  printf '%s' "$host" > /mnt/etc/hostname

  # initramfs
  sed -i "s|block filesystems|block encrypt lvm2 filesystems|g"\
    /mnt/etc/mkinitcpio.conf
  chroot "mkinitcpio -P"

  # root password
  printf '\n%s' "Enter a password for root!"
  chroot "passwd"

  # bootloader
  root="root=/dev/no6tem/root"
  uuid="$(blkid | grep $no6tem | cut -d ' ' -f 2)"
  chroot "bootctl install"
  printf '%s\n%s\n%s\n%s'\
    "default arch.conf"\
    "timeout 3"\
    "console-mode max"\
    "editor no"\
    > /mnt/boot/loader/loader.conf
  printf '%s\n%s\n%s\n%s\n%s'\
    "title Arch Linux no6tem"\
    "linux /vmlinuz-linux"\
    "initrd /${microcode}.img"\
    "initrd /initramfs-linux.img"\
    "options cryptdevice=${uuid//\"}:no6tem $root rw $boot_options"\
    > /mnt/boot/loader/entries/arch.conf
  cp /mnt/boot/loader/entries/arch.conf\
    /mnt/boot/loader/entries/arch-fallback.conf
  sed -i "s|Linux no6tem|Linux no6tem (fallback initramfs)|g"\
    /mnt/boot/loader/entries/arch-fallback.conf
  sed -i "s|initramfs-linux|initramfs-linux-fallback|g"\
    /mnt/boot/loader/entries/arch-fallback.conf

  # pacman
  sed -i "s|#Color|Color|g" /mnt/etc/pacman.conf
  sed -i "s|Architecture = auto|Architecture = auto\nILoveCandy|g"\
    /mnt/etc/pacman.conf

  # swapfile
  if [[ $swap_size != "false" ]]; then
    chroot "mkswap -U clear --size $swap_size --file /no6tem-swap"
    chroot "swapon /no6tem-swap"
    printf '\n%s\n%s'\
      "# swapfile"\
      "/no6tem-swap none swap defaults 0 0"\
      >> /mnt/etc/fstab
  fi

  # services
  chroot "systemctl enable NetworkManager.service"
  chroot "systemctl enable reflector.timer"

  # user
  chroot "useradd -m -G video,systemd-journal $user"
  printf '\n%s' "Enter a password for $user!"
  chroot "passwd $user"
  printf '\n%s\n%s'\
    "# no6tem user"\
    "$user ALL=(ALL:ALL) ALL"\
    >> /mnt/etc/sudoers
  folders="dev,docs,downloads,music,pictures,public,videos"
  chroot "mkdir /home/$user/{$folders}"
  chroot "chown $user:$user /home/$user"

  # install no6tem
  cp /bin/no6tem "/mnt/bin/no6tem"
  chroot "chmod +x /bin/no6tem"
}


### Install no6tem Environment ###
aur_helper() {
  sudo pacman --noconfirm --needed -S git cmake rustup
  rustup default stable
  cd && git clone https://aur.archlinux.org/paru.git
  cd paru && makepkg -si
  cd && rm -rf paru
}

firmware_modules() {
  paru --noconfirm --needed -S mkinitcpio-firmware mkinitcpio-numlock
  sudo sed -i "s|consolefont block|consolefont numlock block|g"\
    /etc/mkinitcpio.conf
  sudo mkinitcpio -P
}

intel_gpu_drivers() {
  paru --noconfirm --needed -S\
    mesa intel-media-driver intel-gpu-tools vulkan-intel\
    vulkan-tools vulkan-headers
}

sound_system() {
  paru --noconfirm --needed -S\
    pipewire pipewire-audio pipewire-alsa pipewire-pulse\
    pipewire-jack wireplumber
}

multimedia_support() {
  paru --noconfirm --needed -S\
    ffmpeg mpv gstreamer gsound gst-libav gst-plugins-base\
    gst-plugins-good gst-plugins-bad gst-plugins-ugly mediainfo
}

gui_libraries() {
  paru --noconfirm --needed -S\
    gtk3 gtk4 nwg-look qt5-wayland qt6-wayland qt5ct qt6ct
}

themes_fonts() {
  paru --noconfirm --needed -S\
    awesome-terminal-fonts noto-fonts noto-fonts-emoji ttf-noto-nerd\
    ttf-ubuntu-nerd ttf-jetbrains-mono-nerd ttf-nerd-fonts-symbols\
    ttf-nerd-fonts-symbols-mono papirus-icon-theme capitaine-cursors\
    breeze-gtk adwaita-qt5 adwaita-qt6
}

terminal_shell() {
  paru --noconfirm --needed -S\
    kitty nushell starship vivid zellij btop broot exa duf dust bat\
    most git-delta chafa bandwhich neofetch macchina zoxide fzf procs\
    bottom diskonaut kmon uutils-coreutils netscanner
}

file_manager() {
  paru --noconfirm --needed -S\
    yazi thunar catfish gvfs gvfs-mtp gvfs-gphoto2 gvfs-afc tumbler\
    ffmpegthumbnailer thunar-volman thunar-archive-plugin xarchiver\
    thunar-media-tags-plugin android-file-transfer xdg-user-dirs 7zip
}

text_editor() {
  paru --noconfirm --needed -S\
    helix bash-language-server hyprls-git jq-lsp tokei bash-completion\
    shellcheck pkgbuild-language-server yaml-language-server marksman\
    rust-analyzer ruff vscode-css-languageserver
  cargo install --git https://github.com/euclio/mdpls
}

tiling_compositor() {
  paru --noconfirm --needed -S\
    hypridle hyprland hyprlock hyprpaper hyprpicker hyprpolkitagent\
    hyprsunset hyprsysteminfo xdg-desktop-portal-hyprland sirula-git
  sudo systemctl --user import-environment\
    WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
  sudo systemctl --user daemon-reload
  # Must be done after first Hyprland boot... 
  # dbus-update-activation-environment --systemd\
  #   WAYLAND_DISPLAY XDG_CURRENT_DESKTOP=Hyprland
}

status_bar() {
  paru --noconfirm --needed -S\
    ags-hyprpanel-git libgtop bluez bluez-utils dart-sass swww python\
    wl-clipboard brightnessctl upower pacman-contrib python-pywal\
    power-profiles-daemon grimblast-git matugen-bin gpu-screen-recorder\
    nm-connection-editor aylurs-gtk-shell-git python-gpustat
  sudo sed -i 's|Pictures/Screenshots|pictures/screenshots|g'\
    /usr/share/hyprpanel/scripts/snapshot.sh
  sudo sed -i 's|Videos/Screencasts|videos/screencasts|g'\
    /usr/share/hyprpanel/scripts/screen_record.sh
}

login_manager() {
  paru --noconfirm --needed -S greetd-tuigreet
  sudo sed -i "s|command =|#command =|g" /etc/greetd/config.toml
  sudo sed -i "s|user =|#user =|g" /etc/greetd/config.toml
  printf '%s\n%s'\
    "command = \"tuigreet --user-menu --cmd Hyprland\""\
    "user = \"$user\"" | sudo tee -a /etc/greetd/config.toml
  sudo systemctl enable greetd.service
}

user_apps() {
  paru --noconfirm --needed -S\
    cromite-bin transmission-gtk masterpdfeditor feh yt-dlp termusic\
    tutanota-desktop-bin freetube-bin gimp sniffnet qemu-desktop\
    gnome-boxes simplex-desktop-bin
}

dotfiles() {
  paru --noconfirm --needed -S github-cli chezmoi
  chezmoi init "$dotfiles"
  if [[ $user != "keyzer" ]]; then
    grep -RiIl "keyzer" "/home/$user/.local/share/chezmoi"\
      | xargs sed -i "s|keyzer|$user|g"
  fi
  chezmoi apply -v
  rm -f /home/$user/README.md /home/$user/no6tem.png
  broot --set-install-state installed
  broot --install
  git clone --depth=1 https://github.com/nushell/nu_scripts
  mv nu_scripts "/home/$user/dev/"
  chsh -s /bin/nu
}


### Main ###
confirm() {
  read -p "Are you sure? " -n 1 -r
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    return 1
  else
    echo
    return 0
  fi
}

case "$@" in
  "prepare drive")
    printf '%s\n%s\n'\
      "Preparing $boot and $no6tem partitions..."\
      "Warning: ALL DATA WILL BE LOST!"
    confirm && drive_manager ;;
  "install base")
    confirm && base && printf '\n%s\n%s\n\n'\
      "Arch Linux base is successfuly installed!"\
      "Warning: REBOOT SYSTEM BEFORE NEXT STEP!" ;;
  "install aur_helper") confirm && aur_helper ;;
  "install firmware_modules") confirm && firmware_modules ;;
  "install intel_gpu_drivers") confirm && intel_gpu_drivers ;;
  "install sound_system") confirm && sound_system ;;
  "install multimedia_support") confirm && multimedia_support ;;
  "install gui_libraries") confirm && gui_libraries ;;
  "install themes_fonts") confirm && themes_fonts ;;
  "install terminal_shell") confirm && terminal_shell ;;
  "install file_manager") confirm && file_manager ;;
  "install text_editor") confirm && text_editor ;;
  "install tiling_compositor") confirm && tiling_compositor ;;
  "install status_bar") confirm && status_bar ;;
  "install login_manager") confirm && login_manager ;;
  "install user_apps") confirm && user_apps ;;
  "install dotfiles") confirm && dotfiles ;;
  *) printf '%s' "$usage"
esac

